"use strict";(self.webpackChunkmutexo_docs=self.webpackChunkmutexo_docs||[]).push([[1453],{5643:(f,e,n)=>{n.r(e),n.d(e,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"client/api/lock","title":"lock","description":"The lock method signals the intent to lock one or more UTXOs to the server.","source":"@site/docs/client/api/lock.md","sourceDirName":"client/api","slug":"/client/api/lock","permalink":"/client/api/lock","draft":false,"unlisted":false,"editUrl":"https://github.com/HarmonicLabs/mutexo-docs-docs/docs/client/api/lock.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"lock"},"sidebar":"tutorialSidebar","previous":{"title":"unsub","permalink":"/client/api/unsub"},"next":{"title":"free","permalink":"/client/api/free"}}');var t=n(4848),o=n(8453);const l={sidebar_position:3,title:"lock"},c="lock",i={},r=[{value:"Signature",id:"signature",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"lock any of a set of utxos",id:"lock-any-of-a-set-of-utxos",level:3},{value:"Lock N of M utxos",id:"lock-n-of-m-utxos",level:3},{value:"Lock all the utxos or fail",id:"lock-all-the-utxos-or-fail",level:3}];function a(f){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...f.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"lock",children:(0,t.jsx)(e.code,{children:"lock"})})}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"lock"})," method signals the intent to lock one or more UTXOs to the server."]}),"\n",(0,t.jsxs)(e.p,{children:["The server emits a ",(0,t.jsx)(e.code,{children:'"lock"'})," event if the lock was succesful, to notify the other clients interested that your utxo was locked."]}),"\n",(0,t.jsx)(e.h2,{id:"signature",children:"Signature"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"async lock(\n    utxoRefs: (ITxOutRef | `${string}#${number}`)[],\n    required?: number\n): Promise<MutexSuccess | MutexFailure>\n"})}),"\n",(0,t.jsx)(e.h3,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"utxoRefs"}),": (",(0,t.jsx)(e.code,{children:"ITxOutRef"})," | ",(0,t.jsx)(e.code,{children:"string"}),")[] - An array of UTXO references to be locked."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"required"})," (optional): ",(0,t.jsx)(e.code,{children:"number"})," - The number of UTXOs required to be locked. Defaults to 1."]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"returns",children:"Returns"}),"\n",(0,t.jsx)(e.p,{children:"A promise that resolves to one of the following messages:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"../../messages/classes/MutexSuccess",children:(0,t.jsx)(e.code,{children:"MutexSuccess"})}),": Indicates that the lock was successful."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"../../messages/classes/MutexFailure",children:(0,t.jsx)(e.code,{children:"MutexFailure"})}),": Indicates that the lock failed."]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"description",children:"Description"}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"lock"})," method sends a lock request to the server and waits for a response indicating whether the lock was successful or not."]}),"\n",(0,t.jsx)(e.p,{children:'After a successful lock, the client will emit a "lock" event.'}),"\n",(0,t.jsx)(e.p,{children:"The method throws an error if the message sent to the server was ill-formed, but not if the lock request was well-formed and fails."}),"\n",(0,t.jsxs)(e.p,{children:["Instead, if the lock request fails, the result will be an instance of ",(0,t.jsx)(e.code,{children:"MutexFailure"}),"."]}),"\n",(0,t.jsxs)(e.p,{children:["If the lock request is successful, a ",(0,t.jsx)(e.code,{children:"MutexSuccess"})," is returned."]}),"\n",(0,t.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(e.h3,{id:"lock-any-of-a-set-of-utxos",children:"lock any of a set of utxos"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:'const client = new MutexoClient(webSocket);\n\nconst anyOfTheseWorks = [\n    { id: "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", index: 0 },\n    "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff#2",\n    "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff#5",\n];\n\n// locks only 1 utxo\nconst lockResult = await client.lock( anyOfTheseWorks );\n\nif (lockResult instanceof MutexSuccess) {\n    console.log(\n        "the following utxos were locked",\n        lockResult.utxoRefs.map( ref => ref.toString() )\n    );\n} else {\n    console.log("Failed to lock UTXO");\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"lock-n-of-m-utxos",children:"Lock N of M utxos"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:'const client = new MutexoClient(webSocket);\n\nconst utxoRefs = [\n    { id: "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", index: 0 },\n    "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff#2",\n    "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff#5",\n];\n\n// locks 2 out of 3 utxos\nconst lockResult = await client.lock(utxoRefs, 2);\n\nif (lockResult instanceof MutexSuccess) {\n    console.log(\n        "the following utxos were locked",\n        lockResult.utxoRefs.map( ref => ref.toString() )\n    );\n} else {\n    console.log("Failed to lock UTXO");\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"lock-all-the-utxos-or-fail",children:"Lock all the utxos or fail"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:'const client = new MutexoClient(webSocket);\n\nconst utxoRefs = [\n    { id: "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", index: 0 },\n    "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff#2",\n    "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff#5",\n];\n\n// locks all 3, or fail\nconst lockResult = await client.lock(utxoRefs, utxoRefs.length);\n\nif (lockResult instanceof MutexSuccess) {\n    console.log(\n        "the following utxos were locked",\n        lockResult.utxoRefs.map( ref => ref.toString() )\n    );\n} else {\n    console.log("Failed to lock UTXO");\n}\n'})})]})}function u(f={}){const{wrapper:e}={...(0,o.R)(),...f.components};return e?(0,t.jsx)(e,{...f,children:(0,t.jsx)(a,{...f})}):a(f)}},8453:(f,e,n)=>{n.d(e,{R:()=>l,x:()=>c});var s=n(6540);const t={},o=s.createContext(t);function l(f){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof f?f(e):{...e,...f}}),[e,f])}function c(f){let e;return e=f.disableParentContext?"function"==typeof f.components?f.components(t):f.components||t:l(f.components),s.createElement(o.Provider,{value:e},f.children)}}}]);