"use strict";(self.webpackChunkmutexo_docs=self.webpackChunkmutexo_docs||[]).push([[6598],{417:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"client/api/sub","title":"sub","description":"The sub method primary purpose is to notify the server that we are interested to receive some events.","source":"@site/docs/client/api/sub.mdx","sourceDirName":"client/api","slug":"/client/api/sub","permalink":"/client/api/sub","draft":false,"unlisted":false,"editUrl":"https://github.com/HarmonicLabs/mutexo-docs-docs/docs/client/api/sub.mdx","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"sidebar_position":0,"title":"sub"},"sidebar":"tutorialSidebar","previous":{"title":"API","permalink":"/category/api"},"next":{"title":"unsub","permalink":"/client/api/unsub"}}');var i=s(4848),r=s(8453);const l={sidebar_position:0,title:"sub"},o="sub",d={},c=[{value:"Signature",id:"signature",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"All <code>&quot;input&quot;</code> events",id:"all-input-events",level:3},{value:"Only <code>&quot;input&quot;</code> events of a single address",id:"only-input-events-of-a-single-address",level:3}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"sub",children:(0,i.jsx)(n.code,{children:"sub"})})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"sub"})," method primary purpose is to notify the server that we are interested to receive some events."]}),"\n",(0,i.jsx)(n.h2,{id:"signature",children:"Signature"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"async sub<EvtName extends MutexoChainEventName>(\n    eventName: EvtName,\n    filters?: IFilter[],\n    evtHandler?: ( msg: DataOf<EvtName> ) => void\n): Promise<SubSuccess | SubFailure>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"eventName"}),": ",(0,i.jsx)(n.a,{href:"../../messages/type-aliases/MutexoChainEventName",children:(0,i.jsx)(n.code,{children:"MutexoChainEventName"})})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"filters"})," (optional): ",(0,i.jsx)(n.a,{href:"../../messages/type-aliases/IFilter",children:(0,i.jsx)(n.code,{children:"Filter"})}),"[]"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"evtHandler"})," (optional): an event listener to be added using ",(0,i.jsx)(n.a,{href:"./addEventListener",children:(0,i.jsx)(n.code,{children:"addEventListener"})})," ",(0,i.jsx)(n.strong,{children:"only in case of success"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"A promise that resolves to one of the following messages:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SubSuccess"}),": Indicates that the subscription was successful."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SubFailure"}),": Indicates that the subscription failed."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"sub"})," method sends a subscription request to the server and waits for a response indicating whether the subscription was successful or not."]}),"\n",(0,i.jsxs)(n.p,{children:["After a succesful subscription, the client will emit events corresponding to the ",(0,i.jsx)(n.a,{href:"../../messages/type-aliases/MutexoChainEventName",children:(0,i.jsx)(n.code,{children:"MutexoChainEventName"})})," specified, using ",(0,i.jsx)(n.a,{href:"./dispatchEvent",children:(0,i.jsx)(n.code,{children:"dispatchEvent"})}),"."]}),"\n",(0,i.jsx)(n.p,{children:"To handle the events emitted you need to add an event listener for the event you subscribed to."}),"\n",(0,i.jsxs)(n.p,{children:["You can do so either by calling ",(0,i.jsx)(n.a,{href:"./addEventListener",children:(0,i.jsx)(n.code,{children:"addEventListener"})})," directly, or by passing the ",(0,i.jsx)(n.code,{children:"evtHandler"})," parameter (that will call ",(0,i.jsx)(n.a,{href:"./addEventListener",children:(0,i.jsx)(n.code,{children:"addEventListener"})})," for you ",(0,i.jsx)(n.strong,{children:"only in case of success"}),")"]}),"\n",(0,i.jsxs)(n.admonition,{title:"event listeners do not account for filters",type:"warning",children:[(0,i.jsxs)(n.p,{children:["event listeners passed either as ",(0,i.jsx)(n.code,{children:"evtHandler"})," or added using ",(0,i.jsx)(n.a,{href:"./addEventListener",children:(0,i.jsx)(n.code,{children:"addEventListener"})}),"\nwill be called for every event triggered for the client."]}),(0,i.jsx)(n.p,{children:"this means that if you subscribe two times with different filters,\nboth the event listener will be called every time,\nregardless of the filters sent with the subscription."}),(0,i.jsxs)(n.p,{children:["You can check if an event received satisfies the filters by calling the ",(0,i.jsx)(n.a,{href:"../events/methods/satisfiesFilters",children:(0,i.jsx)(n.code,{children:"satisfiesFilters"})}),"\nmethod present on the event message, as shown in the ",(0,i.jsx)(n.a,{href:"#only-input-events-of-a-single-address",children:"second example below"}),"."]})]}),"\n",(0,i.jsx)(n.p,{children:"The method throws an error if the message sent to the server was ill formed, but not if the subscription was well formed and fails."}),"\n",(0,i.jsxs)(n.p,{children:["Insted if the subscription fails; the result will be instance of either ",(0,i.jsx)(n.code,{children:"SubFailure"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If the subscription is successful, a ",(0,i.jsx)(n.code,{children:"SubSuccess"})," is returned."]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsxs)(n.h3,{id:"all-input-events",children:["All ",(0,i.jsx)(n.code,{children:'"input"'})," events"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const client = new MutexoClient(webSocket);\n\nconst utxoSpentHandler = _evt => {\n    console.log("someone spent something")\n};\n\nclient.addEventListener("input", utxoSpentHandler);\n\n// no filters specified\n// the client will receive ALL events\n// about ALL addresses followed by the server\nconst subResult = await client.sub("input");\n\nif(!( subResult instanceof SubSuccess ))\n{\n    console.log("subscription was not successful, event listener was not added");\n}\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"only-input-events-of-a-single-address",children:["Only ",(0,i.jsx)(n.code,{children:'"input"'})," events of a single address"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const client = new MutexoClient(webSocket);\n\nconst myFavoriteAddress = "addr1...";\n// only receive notifications\n// about inputs spent by myFavoriteAddress\nconst filters = [\n    { addr: myFavoriteAddress }\n];\n\nconst utxoSpentHandler = evt => {\n    // the handler is still called for every event triggered for the client\n    // if you have mutliple subscriptsion, the filters will accumulate\n    if( !evt.satisfiesFilters( filters ) ) return;\n\n    console.log("my favorite address spent something")\n};\n\nconst subResult = await client.sub(\n    "input",\n    filters,\n    utxoSpentHandler\n);\n\nif(!( subResult instanceof SubSuccess ))\n{\n    console.log("subscription was not successful, event listener was not added");\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var t=s(6540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);